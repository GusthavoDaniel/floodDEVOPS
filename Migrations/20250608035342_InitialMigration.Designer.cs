// <auto-generated />
using System;
using FloodWatch.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FloodWatch.API.Migrations
{
    [DbContext(typeof(FloodWatchDbContext))]
    [Migration("20250608035342_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FloodWatch.API.Models.Alerta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_criacao");

                    b.Property<DateTime?>("DataHoraExpiracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_expiracao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<string>("InstrucoesSeguranca")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("instrucoes_seguranca");

                    b.Property<int>("NivelSeveridade")
                        .HasColumnType("integer")
                        .HasColumnName("nivel_severidade");

                    b.Property<int?>("PessoasAfetadasEstimadas")
                        .HasColumnType("integer")
                        .HasColumnName("pessoas_afetadas_estimadas");

                    b.Property<decimal?>("RaioAfetadoKm")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("raio_afetado_km");

                    b.Property<int>("RegiaoCobertaId")
                        .HasColumnType("integer")
                        .HasColumnName("regiao_coberta_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TipoAlerta")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_alerta");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("titulo");

                    b.Property<int>("UsuarioCriadorId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_criador_id");

                    b.HasKey("Id");

                    b.HasIndex("DataHoraCriacao");

                    b.HasIndex("RegiaoCobertaId");

                    b.HasIndex("Status");

                    b.HasIndex("UsuarioCriadorId");

                    b.ToTable("alertas");
                });

            modelBuilder.Entity("FloodWatch.API.Models.HistoricoEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcesTomadas")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("acoes_tomadas");

                    b.Property<decimal?>("AreaAfetadaKm2")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("area_afetada_km2");

                    b.Property<decimal?>("DanosEstimados")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("danos_estimados");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataHoraFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_fim");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_inicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<string>("LicoesAprendidas")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("licoes_aprendidas");

                    b.Property<decimal?>("NivelAguaMaximo")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("nivel_agua_maximo");

                    b.Property<int>("NivelSeveridade")
                        .HasColumnType("integer")
                        .HasColumnName("nivel_severidade");

                    b.Property<int?>("PessoasAfetadas")
                        .HasColumnType("integer")
                        .HasColumnName("pessoas_afetadas");

                    b.Property<decimal?>("PrecipitacaoTotal")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("precipitacao_total");

                    b.Property<int>("RegiaoCobertaId")
                        .HasColumnType("integer")
                        .HasColumnName("regiao_coberta_id");

                    b.Property<int>("TipoEvento")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_evento");

                    b.HasKey("Id");

                    b.HasIndex("DataHoraInicio");

                    b.HasIndex("RegiaoCobertaId");

                    b.HasIndex("TipoEvento");

                    b.ToTable("historico_eventos");
                });

            modelBuilder.Entity("FloodWatch.API.Models.LeituraSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DataHoraLeitura")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_leitura");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("observacoes");

                    b.Property<decimal?>("PressaoAtmosferica")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("pressao_atmosferica");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer")
                        .HasColumnName("sensor_id");

                    b.Property<int>("StatusQualidade")
                        .HasColumnType("integer")
                        .HasColumnName("status_qualidade");

                    b.Property<decimal?>("TemperaturaAmbiente")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("temperatura_ambiente");

                    b.Property<decimal?>("UmidadeRelativa")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("umidade_relativa");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unidade_medida");

                    b.Property<decimal>("Valor")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("SensorId", "DataHoraLeitura");

                    b.ToTable("leituras_sensor");
                });

            modelBuilder.Entity("FloodWatch.API.Models.RegiaoCoberta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaKm2")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("area_km2");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<int>("NivelRiscoAtual")
                        .HasColumnType("integer")
                        .HasColumnName("nivel_risco_atual");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("PopulacaoEstimada")
                        .HasColumnType("integer")
                        .HasColumnName("populacao_estimada");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("regioes_cobertas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaKm2 = 25.5m,
                            DataAtualizacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Região central da cidade de São Paulo",
                            NivelRiscoAtual = 2,
                            Nome = "Centro de São Paulo",
                            PopulacaoEstimada = 500000
                        },
                        new
                        {
                            Id = 2,
                            AreaKm2 = 45.2m,
                            DataAtualizacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Região da zona sul de São Paulo",
                            NivelRiscoAtual = 1,
                            Nome = "Zona Sul - SP",
                            PopulacaoEstimada = 800000
                        });
                });

            modelBuilder.Entity("FloodWatch.API.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DataInstalacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_instalacao");

                    b.Property<string>("Descricao")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descricao");

                    b.Property<int>("IntervaloLeituraMinutos")
                        .HasColumnType("integer")
                        .HasColumnName("intervalo_leitura_minutos");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("numeric(10,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("numeric(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("RegiaoCobertaId")
                        .HasColumnType("integer")
                        .HasColumnName("regiao_coberta_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<DateTime?>("UltimaLeitura")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultima_leitura");

                    b.Property<decimal?>("ValorMaximo")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("valor_maximo");

                    b.Property<decimal?>("ValorMinimo")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("valor_minimo");

                    b.HasKey("Id");

                    b.HasIndex("Nome");

                    b.HasIndex("RegiaoCobertaId");

                    b.ToTable("sensores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataInstalacao = new DateTime(2024, 5, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Sensor de nível de água no Vale do Anhangabaú",
                            IntervaloLeituraMinutos = 15,
                            Latitude = -23.5489m,
                            Longitude = -46.6388m,
                            Nome = "Sensor Anhangabaú",
                            RegiaoCobertaId = 1,
                            Status = 1,
                            Tipo = 1,
                            ValorMaximo = 5m,
                            ValorMinimo = 0m
                        },
                        new
                        {
                            Id = 2,
                            DataAtualizacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 6, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            DataInstalacao = new DateTime(2024, 4, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Sensor de precipitação no Parque Ibirapuera",
                            IntervaloLeituraMinutos = 10,
                            Latitude = -23.5873m,
                            Longitude = -46.6573m,
                            Nome = "Sensor Ibirapuera",
                            RegiaoCobertaId = 2,
                            Status = 1,
                            Tipo = 2,
                            ValorMaximo = 100m,
                            ValorMinimo = 0m
                        });
                });

            modelBuilder.Entity("FloodWatch.API.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Endereco")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("endereco");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("numeric(10,8)")
                        .HasColumnName("latitude");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("numeric(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceberNotificacoes")
                        .HasColumnType("boolean")
                        .HasColumnName("receber_notificacoes");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefone");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_acesso");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("FloodWatch.API.Models.Alerta", b =>
                {
                    b.HasOne("FloodWatch.API.Models.RegiaoCoberta", "RegiaoCoberta")
                        .WithMany("Alertas")
                        .HasForeignKey("RegiaoCobertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloodWatch.API.Models.Usuario", "UsuarioCriador")
                        .WithMany("AlertasCriados")
                        .HasForeignKey("UsuarioCriadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegiaoCoberta");

                    b.Navigation("UsuarioCriador");
                });

            modelBuilder.Entity("FloodWatch.API.Models.HistoricoEvento", b =>
                {
                    b.HasOne("FloodWatch.API.Models.RegiaoCoberta", "RegiaoCoberta")
                        .WithMany("HistoricoEventos")
                        .HasForeignKey("RegiaoCobertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegiaoCoberta");
                });

            modelBuilder.Entity("FloodWatch.API.Models.LeituraSensor", b =>
                {
                    b.HasOne("FloodWatch.API.Models.Sensor", "Sensor")
                        .WithMany("Leituras")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("FloodWatch.API.Models.Sensor", b =>
                {
                    b.HasOne("FloodWatch.API.Models.RegiaoCoberta", "RegiaoCoberta")
                        .WithMany("Sensores")
                        .HasForeignKey("RegiaoCobertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegiaoCoberta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FloodWatch.API.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FloodWatch.API.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloodWatch.API.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FloodWatch.API.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FloodWatch.API.Models.RegiaoCoberta", b =>
                {
                    b.Navigation("Alertas");

                    b.Navigation("HistoricoEventos");

                    b.Navigation("Sensores");
                });

            modelBuilder.Entity("FloodWatch.API.Models.Sensor", b =>
                {
                    b.Navigation("Leituras");
                });

            modelBuilder.Entity("FloodWatch.API.Models.Usuario", b =>
                {
                    b.Navigation("AlertasCriados");
                });
#pragma warning restore 612, 618
        }
    }
}
